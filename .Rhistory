for (j in 1:i) {
cat("#")
}
cat("\n")
}
}
downstairs(4)
### Escada que sobe ----
upstairs <- function(n) {
for (i in 1:n) {
for (j in 1:(n-i)) {
print(" ")
}
for (k in 1:i) {
print("#")
}
}
}
upstais(4)
### Escada que sobe ----
upstairs <- function(n) {
for (i in 1:n) {
for (j in 1:(n-i)) {
cat(" ")
}
for (k in 1:i) {
cat("#")
}
}
}
upstairs(4)
### Escada que sobe ----
upstairs <- function(n) {
for (i in 1:n) {
for (j in 1:(n-i)) {
cat(" ")
}
for (k in 1:i) {
cat("#")
}
cat("\n")
}
}
upstairs(4)
### Escada que sobe ----
upstairs <- function(n) {
for (i in 1:n) {
for (j in 1:(n - i + 1)) {
cat(" ")
}
for (k in 1:i) {
cat("#")
}
cat("\n")
}
}
upstairs(4)
### Piramide ----
piramide <- function(n) {
for (i in 1:n) {
for (j in 1:(n - i + 1)) {
cat("o")
}
}
}
piramide(3)
### Piramide ----
piramide <- function(n) {
for (i in 1:n) {
for (j in 1:(n - i + 1)) {
cat("o")
}
cat("\n")
}
}
piramide(3)
piramide(4)
### Piramide ----
piramide <- function(n) {
for (i in 1:n) {
for (j in 1:(n - i + 1)) {
cat("o")
}
for (k in 1:i) {
cat("#")
}
cat("\n")
}
}
piramide(4)
### Piramide ----
piramide <- function(n) {
for (i in 1:n) {
for (j in 1:(n - i + 1)) {
cat("_")
}
for (k in 1:i) {
cat("#")
}
cat("\n")
}
}
piramide(4)
### Piramide ----
piramide <- function(n) {
for (i in 1:n) {
for (j in 1:(n - i + 1)) {
cat("_")
}
for (k in 1:i) {
cat("#")
}
cat("_")
cat("\n")
}
}
piramide(4)
### Piramide ----
piramide <- function(n) {
for (i in 1:n) {
for (j in 1:(n - i + 1)) {
cat("_")
}
for (k in 1:i) {
cat("#")
}
cat("_")
for (l in 1:i) {
cat("#")
}
cat("\n")
}
}
piramide(4)
### Piramide ----
piramide <- function(n) {
for (i in 1:n) {
for (j in 1:(n - i + 1)) {
cat(" ")
}
for (k in 1:i) {
cat("#")
}
cat(" ")
for (l in 1:i) {
cat("#")
}
cat("\n")
}
}
piramide(4)
piramide(10)
## Fibonacci ----
fibonacci <- function(n) {
sequencia <- c(1)
soma <- 0
if (n == 1) {
return(1)
} else {
for (i in 1:n) {
soma <- soma + sequencia[i]
sequencia <- c(sequencia, soma)
}
}
return(sequencia)
}
fibonacci(1)
fibonacci(2)
## Fibonacci ----
fibonacci <- function(n) {
sequencia <- c(1)
soma <- 0
if (n == 1) {
return(1)
} else {
for (i in 1:n) {
soma <- soma + sequencia[i]
sequencia <- c(sequencia, soma)
}
}
return(sequencia[1:n])
}
fibonacci(2)
fibonacci(5)
## Fibonacci ----
fibonacci <- function(n) {
sequencia <- c(1)
soma <- 0
for (i in 1:n) {
soma <- soma + sequencia[i]
sequencia <- c(sequencia, soma)
}
return(sequencia[1:n])
}
fibonacci(5)
## Fibonacci ----
fibonacci <- function(n) {
sequencia <- c(1, 1)
for (i in 2:n) {
soma <- sequencia[i] + sequencia[i - 1]
sequencia <- c(sequencia, soma)
}
return(sequencia[1:n])
}
fibonacci(5)
fibonacci(1)
fibonacci(2)
fibonacci(3)
fibonacci(5)
fibonacci(9)
fibonacci(20)
fibonacci(40)
fibonacci(50)
fibonacci(60)
fibonacci(10)
## Fibonacci ----
fibonacci <- function(n) {
sequencia <- c(1, 1)
for (i in 2:n) {
soma <- sequencia[i] + sequencia[i - 1]
sequencia <- c(sequencia, soma)
}
return(sequencia[n])
}
fibonacci(10)
fibonacci(10)
fibonacci_sequencia <- function(n) {
sequencia <- c(1, 1)
for (i in 2:n) {
soma <- sequencia[i] + sequencia[i - 1]
sequencia <- c(sequencia, soma)
}
return(sequencia[1:n])
}
fibonacci_sequencia(10)
fibonacci(10)
soma <- function(lista) {
total <- 0
for (num in lista) {
if (!is.numeric(num))
next
total <- total + num
}
return(total)
}
soma(numeros)
numeros <- c(1, 2, 3, 4, NA, 'texto')
soma(numeros)
is.numeric(1)
is.numeric(NA)
soma <- function(lista) {
total <- 0
for (num in lista) {
if (is.numeric(num))
total <- total + num
}
return(total)
}
soma(numeros)
soma <- function(lista) {
total <- 0
for (num in lista) {
if (is.numeric(num)) {
total <- total + num
}
}
return(total)
}
soma(numeros)
soma <- function(lista) {
total <- 0
for (num in lista) {
if (is.numeric(as.numeric(num))) {
total <- total + num
}
}
return(total)
}
soma(numeros)
as.numeric('texto')
soma <- function(lista) {
total <- 0
for (num in lista) {
if (!is.na(as.numeric(num))) {
total <- total + num
}
}
return(total)
}
soma(numeros)
soma <- function(lista) {
total <- 0
for (num in lista) {
if (!is.na(as.numeric(num))) {
print(as.numeric(num))
#total <- total + num
}
}
return(total)
}
soma(numeros)
as.numeric(numeros)
is.numeric(numeros)
which(is.numeric(numeros))
numeros <- c(1, 2, 3, 4, NA)
is.numeric(numeros)
which(is.numeric(numeros))
soma <- function(lista) {
total <- 0
for (num in lista) {
if (is.numeric(num)) {
total <- total + num
}
}
return(total)
}
soma(numeros)
soma <- function(lista) {
total <- 0
for (num in lista) {
if (is.numeric(num)) {
print(num)
total <- total + num
}
}
return(total)
}
soma(numeros)
soma <- function(lista) {
total <- 0
for (num in lista) {
if (is.numeric(num)) {
print(is.numeric(num))
print(num)
total <- total + num
}
}
return(total)
}
soma(numeros)
soma <- function(lista) {
total <- 0
for (num in lista) {
if (!is.na(num)) {
print(is.numeric(num))
print(num)
total <- total + num
}
}
return(total)
}
soma(numeros)
soma <- function(lista, na.rm = F) {
total <- 0
for (num in lista) {
if (na.rm) {
if (!is.na(num)) {
total <- total + num
}
} else {
total <- total + num
}
}
return(total)
}
soma(numeros)
soma(numeros, T)
## Fibonacci ----
fibonacci <- function(n) {
sequencia <- c(1, 1)
for (i in 2:n) {
soma <- sequencia[i] + sequencia[i - 1]
}
sequencia[1] <- sequencia[2]
sequencia[2] <- soma
return(sequencia[1])
}
fibonacci(10)
## Fibonacci ----
fibonacci <- function(n) {
sequencia <- c(1, 1)
for (i in 2:n) {
soma <- sequencia[i] + sequencia[i - 1]
sequencia[1] <- sequencia[2]
sequencia[2] <- soma
}
return(sequencia[1])
}
fibonacci(10)
## Fibonacci ----
fibonacci <- function(n) {
sequencia <- c(1, 1)
for (i in 2:n) {
soma <- sequencia[1] + sequencia[2]
sequencia[1] <- sequencia[2]
sequencia[2] <- soma
}
return(sequencia[1])
}
fibonacci(10)
## Fibonacci ----
fibonacci <- function(n) {
sequencia_final <- c(1, 1)
for (i in 2:n) {
soma <- sequencia_final[1] + sequencia_final[2]
sequencia_final[1] <- sequencia_final[2]
sequencia_final[2] <- soma
}
return(sequencia_final[1])
}
fibonacci(50)
seq_fibonacci <- function(x) {
if (class(x) != "numeric" | x - round(x) != 0) {
return('a entrada deve ser um número inteiro')
}
if (x <= 0) {
return('a entrada deve ser um número maior do que 0')
}
if (x == 1) {
return(0)
}
if (x == 2) {
return(1)
} else {
seq <- c(0, 1)
i <- 3
for (i in 3:10000) {
# valor a ser adicionado na sequência
add <- seq[length(seq)] + seq[length(seq) - 1]
# adicionando o valor na sequência
seq[i] <- add
}
return(seq[x])
}
}
seq_fibonacci(5)
seq_fibonacci(5)
seq_fibonacci(10)
seq_fibonacci(11)
seq_fibonacci(1)
seq_fibonacci(2)
seq_fibonacci(3)
fibonacci(1)
fibonacci(2)
## Fibonacci ----
fibonacci <- function(n) {
sequencia_final <- c(1, 1)
if (n == 1) {
return(1)
} else {
for (i in 2:n) {
soma <- sequencia_final[1] + sequencia_final[2]
sequencia_final[1] <- sequencia_final[2]
sequencia_final[2] <- soma
}
}
return(sequencia_final[1])
}
fibonacci(1)
fibonacci(2)
fibonacci(3)
fibonacci_sequencia <- function(n) {
sequencia <- c(1, 1)
if (n == 1) {
return(1)
} else {
for (i in 2:n) {
soma <- sequencia[i] + sequencia[i - 1]
sequencia <- c(sequencia, soma)
}
}
return(sequencia[1:n])
}
fibonacci_sequencia(10)
fibonacci_sequencia(2)
fibonacci_sequencia(1)
fibonacci_sequencia(5)
seq_fibonacci(5)
seq_fibonacci <- function(x) {
if (class(x) != "numeric" | x - round(x) != 0) {
return('a entrada deve ser um número inteiro')
}
if (x <= 0) {
return('a entrada deve ser um número maior do que 0')
}
if (x == 1) {
return(0)
} else {
seq <- c(0, 1)
i <- 3
for (i in 3:10000) {
# valor a ser adicionado na sequência
add <- seq[length(seq)] + seq[length(seq) - 1]
# adicionando o valor na sequência
seq[i] <- add
}
return(seq[x])
}
}
seq_fibonacci(5)
seq_fibonacci(3)
fibonacci(50)
fibonacci2 <- function(n) {
if (n == 1 | n == 2) {
return(1)
} else {
return(fibonacci2(n - 1) + fibonacci2(n - 2))
}
}
fibonacci2(10)
fibonacci2(20)
fibonacci2(30)
