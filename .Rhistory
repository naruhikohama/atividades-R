# Ambiente ----
# setwd("~/Pessoal/Aprendendo/R/enem")
setwd("~/Tutoriais - R")
# Loops ----
nomes <- c('Naruhiko', 'Paula', 'Camila', 'Letícia', 'Renata')
for (i in 1:5) {
print(nomes[i])
}
for (i in 1:5) {
print(paste0("O nome na posição ", i, " é ", nomes[i]))
}
# Loops ----
nomes <- c('Naruhiko', 'Paula', 'Camila', 'Letícia', 'Renata', 'Vinicius')
for (i in 1:lenght(nomes)) {
print(paste0("O nome na posição ", i, " é ", nomes[i]))
}
for (i in 1:length(nomes)) {
print(paste0("O nome na posição ", i, " é ", nomes[i]))
}
for (i in nomes) {
print(i)
}
# Dados ----
## Definindo as diretoria da empresa
diretorias <- c("Recursos Humanos", "Financeiro", "Marketing", "Tecnologia", "Operações")
## Gerando a base de dados
set.seed(123) # Define uma semente para garantir a reprodutibilidade do exemplo
n_pessoas <- 1000 # Número de pessoas na base de dados
pessoas <- data.frame(
nome = replicate(n_pessoas, paste0(sample(LETTERS, 8), collapse = "")),
diretoria = sample(diretorias, n_pessoas, replace = TRUE),
gestor_id = sample(1:100, n_pessoas, replace = TRUE),
engajamento = runif(n_pessoas, 0, 10)
)
View(pessoas)
pessoas <- data.frame(
nome = replicate(n_pessoas, paste0(sample(LETTERS, 8), collapse = "")),
diretoria = sample(diretorias, n_pessoas, replace = TRUE),
gestor_id = factor(sample(1:100, n_pessoas, replace = TRUE)),
engajamento = runif(n_pessoas, 0, 10)
)
summary(pessoas)
# Bibliotecas ----
library(tidyverse)
for (i in diretorias) {
df_temp <- pessoas %>%
filter(diretoria == i) %>%
groupby(gestor_id) %>%
summarise(media = mean(engajamento))
ggplot(df_temp) +
aes(x = gestor_id, y = media) +
geom_col(fill = "#5288db") +
scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +
theme(panel.background = element_rect(fill = 'white', color = 'grey'),
panel.grid = element_blank())
}
for (i in diretorias) {
df_temp <- pessoas %>%
filter(diretoria == i) %>%
group_by(gestor_id) %>%
summarise(media = mean(engajamento))
ggplot(df_temp) +
aes(x = gestor_id, y = media) +
geom_col(fill = "#5288db") +
scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +
theme(panel.background = element_rect(fill = 'white', color = 'grey'),
panel.grid = element_blank())
}
for (i in diretorias) {
df_temp <- pessoas %>%
filter(diretoria == i) %>%
group_by(gestor_id) %>%
summarise(media = mean(engajamento))
p <- ggplot(df_temp) +
aes(x = gestor_id, y = media) +
geom_col(fill = "#5288db") +
scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +
theme(panel.background = element_rect(fill = 'white', color = 'grey'),
panel.grid = element_blank())
print(p)
}
## Gerando a base de dados
set.seed(123) # Define uma semente para garantir a reprodutibilidade do exemplo
n_pessoas <- 1000 # Número de pessoas na base de dados
# Cria um data frame vazio para armazenar as informações de cada gestor
gestores <- data.frame(
diretoria = character(),
gestor_id = integer(),
subordinados = list()
)
# Loop para criar os gestores e seus subordinados
for (dir in diretorias) {
gestores_na_diretoria <- sample(1:10, 1) # Define o número de gestores na diretoria
gestores_dir <- data.frame(
diretoria = rep(dir, gestores_na_diretoria),
gestor_id = 1:gestores_na_diretoria
) # Cria os gestores na diretoria
for (i in 1:nrow(gestores_dir)) {
gestor_subordinados <- pessoas[pessoas$diretoria == dir & pessoas$gestor_id == i, "nome"]
gestor_subordinados <- gestor_subordinados[1:min(length(gestor_subordinados), 10)]
gestores_dir$subordinados[i] <- list(gestor_subordinados)
} # Adiciona os subordinados de cada gestor
gestores <- rbind(gestores, gestores_dir) # Adiciona os gestores à base de dados de gestores
}
# Remove a coluna de gestor_id da base de dados de pessoas
pessoas$gestor_id <- NULL
# Atribui gestores aleatórios para cada pessoa na base de dados
for (dir in diretorias) {
gestores_na_diretoria <- gestores$gestor_id[gestores$diretoria == dir]
pessoas_na_diretoria <- pessoas[pessoas$diretoria == dir,]
Paula Costa21:30
# Atribui gestores aleatórios para cada pessoa na base de dados
for (dir in diretorias) {
gestores_na_diretoria <- gestores$gestor_id[gestores$diretoria == dir]
pessoas_na_diretoria <- pessoas[pessoas$diretoria == dir,]
for (i in 1:nrow(pessoas_na_diretoria)) {
gestor_id <- sample(gestores_na_diretoria, 1)
subordinados_do_gestor <- unlist(gestores[gestores$diretoria == dir & gestores$gestor_id == gestor_id, "subordinados"])
while (pessoas_na_diretoria$nome[i] %in% subordinados_do_gestor) {
gestor_id <- sample(gestores_na_diretoria, 1)
subordinados_do_gestor <- unlist(gestores[gestores$diretoria == dir & gestores$gestor_id == gestor_id, "subordinados"])
}
pessoas_na_diretoria$gestor_id[i] <- gestor_id
}
pessoas[pessoas$diretoria == dir,] <- pessoas_na_diretoria
}
View(pessoas)
# Ambiente ----
setwd("~/Tutoriais - R")
rm(list = ls())
# Bibliotecas ----
library(tidyverse)
# Dados ----
## Definindo as diretoria da empresa
diretorias <- c("Recursos Humanos", "Financeiro", "Marketing", "Tecnologia", "Operações")
## Gerando a base de dados
set.seed(123) # Define uma semente para garantir a reprodutibilidade do exemplo
n_pessoas <- 1000 # Número de pessoas na base de dados
# Cria um data frame vazio para armazenar as informações de cada gestor
gestores <- data.frame(
diretoria = character(),
gestor_id = integer(),
subordinados = list()
)
# Loop para criar os gestores e seus subordinados
for (dir in diretorias) {
gestores_na_diretoria <- sample(1:10, 1) # Define o número de gestores na diretoria
gestores_dir <- data.frame(
diretoria = rep(dir, gestores_na_diretoria),
gestor_id = 1:gestores_na_diretoria
) # Cria os gestores na diretoria
for (i in 1:nrow(gestores_dir)) {
gestor_subordinados <- pessoas[pessoas$diretoria == dir & pessoas$gestor_id == i, "nome"]
gestor_subordinados <- gestor_subordinados[1:min(length(gestor_subordinados), 10)]
gestores_dir$subordinados[i] <- list(gestor_subordinados)
} # Adiciona os subordinados de cada gestor
gestores <- rbind(gestores, gestores_dir) # Adiciona os gestores à base de dados de gestores
}
# Remove a coluna de gestor_id da base de dados de pessoas
pessoas$gestor_id <- NULL
# Loop para criar os gestores e seus subordinados
for (dir in diretorias) {
gestores_na_diretoria <- sample(1:10, 1) # Define o número de gestores na diretoria
gestores_dir <- data.frame(
diretoria = rep(dir, gestores_na_diretoria),
gestor_id = 1:gestores_na_diretoria
) # Cria os gestores na diretoria
for (i in 1:nrow(gestores_dir)) {
gestor_subordinados <- gestores[gestores$diretoria == dir & gestores$gestor_id == i, "nome"]
gestor_subordinados <- gestor_subordinados[1:min(length(gestor_subordinados), 10)]
gestores_dir$subordinados[i] <- list(gestor_subordinados)
} # Adiciona os subordinados de cada gestor
gestores <- rbind(gestores, gestores_dir) # Adiciona os gestores à base de dados de gestores
}
# Remove a coluna de gestor_id da base de dados de pessoas
gestores$gestor_id <- NULL
# Atribui gestores aleatórios para cada pessoa na base de dados
for (dir in diretorias) {
gestores_na_diretoria <- gestores$gestor_id[gestores$diretoria == dir]
pessoas_na_diretoria <- gestores[gestores$diretoria == dir,]
for (i in 1:nrow(pessoas_na_diretoria)) {
gestor_id <- sample(gestores_na_diretoria, 1)
subordinados_do_gestor <- unlist(gestores[gestores$diretoria == dir & gestores$gestor_id == gestor_id, "subordinados"])
while (pessoas_na_diretoria$nome[i] %in% subordinados_do_gestor) {
gestor_id <- sample(gestores_na_diretoria, 1)
subordinados_do_gestor <- unlist(gestores[gestores$diretoria == dir & gestores$gestor_id == gestor_id, "subordinados"])
}
pessoas_na_diretoria$gestor_id[i] <- gestor_id
}
gestores[gestores$diretoria == dir,] <- pessoas_na_diretoria
}
gestor_id <- sample(gestores_na_diretoria, 1)
gestores$gestor_id[gestores$diretoria == dir]
gestores_na_diretoria <- sample(1:10, 1)
# Loop para criar os gestores e seus subordinados
for (dir in diretorias) {
gestores_na_diretoria <- sample(1:10, 1) # Define o número de gestores na diretoria
gestores_dir <- data.frame(
diretoria = rep(dir, gestores_na_diretoria),
gestor_id = 1:gestores_na_diretoria
) # Cria os gestores na diretoria
for (i in 1:nrow(gestores_dir)) {
gestor_subordinados <- gestores[gestores$diretoria == dir & gestores$gestor_id == i, "nome"]
gestor_subordinados <- gestor_subordinados[1:min(length(gestor_subordinados), 10)]
gestores_dir$subordinados[i] <- list(gestor_subordinados)
} # Adiciona os subordinados de cada gestor
gestores <- rbind(gestores, gestores_dir) # Adiciona os gestores à base de dados de gestores
}
pessoas <- data.frame(
nome = replicate(n_pessoas, paste0(sample(LETTERS, 8), collapse = "")),
diretoria = sample(diretorias, n_pessoas, replace = TRUE),
gestor_id = sample(1:100, n_pessoas, replace = TRUE),
engajamento = runif(n_pessoas, 0, 10)
)
# Loop para criar os gestores e seus subordinados
for (dir in diretorias) {
gestores_na_diretoria <- sample(1:10, 1) # Define o número de gestores na diretoria
gestores_dir <- data.frame(
diretoria = rep(dir, gestores_na_diretoria),
gestor_id = 1:gestores_na_diretoria
) # Cria os gestores na diretoria
for (i in 1:nrow(gestores_dir)) {
gestor_subordinados <- pessoas[pessoas$diretoria == dir & pessoas$gestor_id == i, "nome"]
gestor_subordinados <- gestor_subordinados[1:min(length(gestor_subordinados), 10)]
gestores_dir$subordinados[i] <- list(gestor_subordinados)
} # Adiciona os subordinados de cada gestor
gestores <- rbind(gestores, gestores_dir) # Adiciona os gestores à base de dados de gestores
}
# Dados ----
base <- readxl::read_xlsx("dados/enem/enem.xlsx")
View(base)
enem <- base %>%
filter(NU_NOTA_MT > 0)
View(enem)
tp_st_conclusao_enem <- unique(enem$TP_ST_CONCLUSAO)
estado_enem <- unique(enem$SG_UF_RESIDENCIA)
for (i in estado_enem) {
df_temp <- enem %>%
filter(SG_UF_RESIDENCIA == i) %>%
group_by(TP_ST_CONCLUSAO) %>%
summarise(media = mean(NU_NOTA_MT))
p <- ggplot(df_temp) +
aes(x = TP_ST_CONCLUSAO, y = media) +
geom_col(fill = "#5288db") +
scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +
theme(panel.background = element_rect(fill = 'white', color = 'grey'),
panel.grid = element_blank())
print(p)
}
for (i in estado_enem) {
df_temp <- enem %>%
filter(SG_UF_RESIDENCIA == i) %>%
group_by(TP_ST_CONCLUSAO) %>%
summarise(media = mean(NU_NOTA_MT))
p <- ggplot(df_temp) +
aes(x = TP_ST_CONCLUSAO, y = media) +
geom_col(fill = "#5288db") +
scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +
labs(title = i)
theme(panel.background = element_rect(fill = 'white', color = 'grey'),
panel.grid = element_blank())
print(p)
}
for (i in estado_enem) {
df_temp <- enem %>%
filter(SG_UF_RESIDENCIA == i) %>%
group_by(TP_ST_CONCLUSAO) %>%
summarise(media = mean(NU_NOTA_MT))
p <- ggplot(df_temp) +
aes(x = TP_ST_CONCLUSAO, y = media) +
geom_col(fill = "#5288db") +
scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +
labs(title = i) +
theme(panel.background = element_rect(fill = 'white', color = 'grey'),
panel.grid = element_blank())
print(p)
}
for (i in 1:5) {
for (j in 1:5) {
print(i*j)
}
}
for (i in 1:5) {
for (j in 1:5) {
print(i*j)
if (j == 5) {
next
}
}
}
for (i in 1:5) {
for (j in 1:5) {
if (j == 5) {
next
}
print(i*j)
}
}
for (i in 1:5) {
for (j in 1:5) {
if (j == 5) {
j <- 10
}
print(i*j)
}
}
for (i in estado_enem) {
df_temp <- enem %>%
filter(SG_UF_RESIDENCIA == i) %>%
group_by(TP_ST_CONCLUSAO) %>%
summarise(media = mean(NU_NOTA_MT))
p <- ggplot(df_temp) +
aes(x = TP_ST_CONCLUSAO, y = media) +
geom_col(fill = "#5288db") +
geom_text(aes(label = media)) +
scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +
labs(title = i) +
theme(panel.background = element_rect(fill = 'white', color = 'grey'),
panel.grid = element_blank())
print(p)
}
for (i in estado_enem) {
df_temp <- enem %>%
filter(SG_UF_RESIDENCIA == i) %>%
group_by(TP_ST_CONCLUSAO) %>%
summarise(media = mean(NU_NOTA_MT))
p <- ggplot(df_temp) +
aes(x = TP_ST_CONCLUSAO, y = media) +
geom_col(fill = "#5288db") +
geom_text(aes(label = media), vjust = -1) +
scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +
labs(title = i) +
theme(panel.background = element_rect(fill = 'white', color = 'grey'),
panel.grid = element_blank())
print(p)
}
for (i in estado_enem) {
df_temp <- enem %>%
filter(SG_UF_RESIDENCIA == i) %>%
group_by(TP_ST_CONCLUSAO) %>%
summarise(media = mean(NU_NOTA_MT))
p <- ggplot(df_temp) +
aes(x = TP_ST_CONCLUSAO, y = media) +
geom_col(fill = "#5288db") +
geom_text(aes(label = round(media, 1)), vjust = -1) +
scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +
labs(title = i) +
theme(panel.background = element_rect(fill = 'white', color = 'grey'),
panel.grid = element_blank())
print(p)
}
setwd("C:/Users/Naruhiko/OneDrive/Documentos/Programação/atividades-R")
